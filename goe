#!/usr/bin/env bash
# make Golang project "outside" of `$GOPATH`.
# author: Quar

set -eu


function show_help {

    cat <<"EOF"

goe -- create go project anywhere

Usage (same as go):
    goe env [variable] -- show go env
    goe run main.go -- run go project with GOPATH set
    goe build -- go build current project
    goe get -- get libs
    goe test -- test
    goe list -- list packages

Note:
  run `goe` inside go project root folder like this

  my-go-project/
      main.go
      vendor/
          folder1/
              package1/
                  package1-code.go
          package2/
              package2-code.go


  where within `main.go`, one can import packages like:

  ``` go
  import (
      "fmt"

      "folder1/package1"
      "package2"
  )
  ```

Caveats:
  `goe` meddle GOPATH by using `GOPATH=$HOME/.go.local/`, and create simlink
  of current project directory under `$HOME/.go.local/` to allow go-tools
  to do path searching as if this project was created under `$GOPATH/src`.
EOF

}


PROJPATH=$PWD
PROJDIR=$(basename $PROJPATH)

export GOPATH=$HOME/.go.local
GOSRCPATH=$GOPATH/src
GOPROJPATH=$GOSRCPATH/$PROJDIR

if [ ! -d $GOSRCPATH ]; then
    mkdir -p $GOSRCPATH
fi

if [ ! $GOPROJPATH -ef $PROJPATH ]; then
    cd $GOSRCPATH
    ln -sf $PROJPATH $GOPROJPATH
fi

if [ $# -lt 1 ]; then
    show_help
    exit 0
elif [[ $1 =~ -h|--help ]]; then
    show_help
    exit 0
elif [[ $1 =~ env|run|build|install|test|get|list ]]; then
    cd $GOPROJPATH
    go $@
else
    show_help
    exit 1
fi
